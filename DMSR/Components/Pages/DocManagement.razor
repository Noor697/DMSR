@page "/Doc Management"
@using DMSR.Models
@using DMSR.Components.Pages
@using DMSR.Services
@rendermode InteractiveServer
@attribute [StreamRendering]

@inject DocManagementService DocManagementService
@inject IJSRuntime JS


<!-- Main Card -->
<div class="card shadow-sm ">
    <div class="card-body">
        <div class="d-flex justify-content-between align-items-center ">
            <h1>Document Management</h1>
            <!--searching-->
            <div class="input-container">
                <i class="bi bi-search search-icon"></i>
                <input type="text" placeholder="Search here..." @bind="SearchTerm" @oninput="OnSearchInput">
            </div>
        </div>
        <h4 class="color">Document Management</h4>
        <!--Filter and Add Buttons -->
        <div class="d-flex justify-content-end align-items-center mb-3">
            <div class="d-flex gap-2">
                <button class="btn text-secondary">
                    <i class="fa fa-filter me-2"></i>Filter
                </button>
                <select @onchange="OnStatusChanged" class="form-select me-3 filter w-auto ">
                    <option value="All Documents">All Documents</option>
                    <option value="Report"> Report</option>
                    <option value="Folder">Folder</option>
                    <option value="Presentation">Presentation</option>
                    <option value="Pdf">Pdf</option>
                </select>

            </div>
            <button @onclick="AddDoc" class="btn add-user">Upload Doc</button>
        </div>
        <!--table data displaying-->
        <div class="container my-4">
            <div class="row">
                <div class="col-md-12">
                    @if (FilteredDocs == null)
                    {
                        <h5 class="fw-bold text-white text-center p-3 bg-success">Loading...</h5>
                    }
                    else if (!FilteredDocs.Any())
                    {
                        <h5 class="fw-bold text-white text-center p-3 bg-success">No Docs Found...</h5>
                    }
                    else
                    {
                        <div class="table-responsive">
                            <table class="table  custom-table">
                                <thead>
                                    <tr>
                                        <th>DOCUMENT TITLE</th>
                                        <th>DOCUMENT TYPE</th>
                                        <th>AUTHOR</th>
                                        <th>CREATED DATE</th>
                                        <th>LAST MODIFIED DATE</th>
                                        <th>VERSION</th>
                                        <th>ACTIONS</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in FilteredDocs)
                                    {
                                        <tr>

                                            <td style="padding-left:40px;">
                                                <div style="display: flex; align-items: center; gap: 5px;">
                                                    @if (item.Docfile != null)
                                                    {
                                                        <img src="data:image/png;base64,@Convert.ToBase64String(item.Docfile)" alt="Profile"
                                                        class="img-circle" width="40" height="40" />
                                                    }
                                                    <span>@item.Document_title</span>
                                                </div>
                                            </td>
                                            <td>@item.Document_type</td>
                                            <td>
                                                @if (item.Users != null && item.Users.Any())
                                                {
                                                    @foreach (var user in item.Users)
                                                    {
                                                        @user.UserName
                                                    }
                                                }
                                                else
                                                {
                                                    <span>No users</span>
                                                }

                                            </td>

                                            <td>@item.CreatedDate</td>
                                            <td>@item.LastModifiedDuration</td>
                                            <td>@item.Version</td>
                                            <td>
                                                <button @onclick="() => EditDoc(item.DocId)" class="btn act">
                                                    <img src="/Images/edit-logo.png" />
                                                </button>
                                                <button @onclick="() => ViewDoc(item.DocId)" class="btn act">
                                                    <img src="/Images/eye-logo.png" />
                                                </button>
                                                <button class="btn act" @onclick="() => DownloadSingleDoc(item.DocId)">
                                                    <img src="/Images/Download-logo.png" />
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }

                </div>
            </div>
        </div>
    </div>
</div>

<!--Pagination -->
<div class="pagination-container d-flex float-end gap-2">

    <button class="pagination-btn" @onclick="PreviousPage" disabled="@(currentPage == 1)">
        <i class="bi bi-chevron-left"></i>
    </button>

    @for (int i = 1; i <= TotalPages; i++)
    {
        <button class="pagination-btn @(currentPage == i ? "active-page" : "")" @onclick="() => GoToPage(i)">
            @i
        </button>
    }

    <button class="pagination-btn" @onclick="NextPage" disabled="@(currentPage == TotalPages)">
        <i class="bi bi-chevron-right"></i>
    </button>

</div>


<!-- Modal Component -->
<DocModal @ref="DocModalRef"/>
@code {
    private IEnumerable<Doc_Management> Docs { get; set; }
    //for modal
    private DocModal DocModalRef;
    //for pagination
    private int currentPage = 1;
    private int pageSize = 6;
    private int totalItems;

    private int TotalPages => (int)Math.Ceiling((double)totalItems / pageSize);

    //Searching users in search bar
    private string SearchTerm { get; set; } = "";
    private IEnumerable<Doc_Management> FilteredDocs { get; set; }

    //filtering
    private string SelectedStatus = "All Documents";

    private void FilteringDocs()
    {
        if (SelectedStatus == "All Documents")
        {
            FilteredDocs = Docs;
        }
        else
        {
            FilteredDocs = Docs
                .Where(u => u.Document_type.Equals(SelectedStatus, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
    }
    private async Task OnStatusChanged(ChangeEventArgs e)
    {
        SelectedStatus = e.Value?.ToString() ?? "All Departments";
        FilteringDocs();
    }


    //searching users
    private void FilterDocs()
    {
        if (string.IsNullOrWhiteSpace(SearchTerm))
        {
            FilteredDocs = Docs;
        }
        else
        {
            FilteredDocs = Docs.Where(s =>
                s.Document_type.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase) ||
                s.Author.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase) ||
                s.Document_title.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase)
            ).ToList();
        }
    }
    private async Task OnSearchInput(ChangeEventArgs e)
    {
        SearchTerm = e.Value?.ToString() ?? string.Empty;
        FilterDocs();
    }

    //view button function
    private async Task ViewDoc(int id)
    {
        await DocModalRef.View(id); // Call modal’s view method
    }

    //first lifecycle method

    protected override async Task OnInitializedAsync()
    {
        await GetAlldocsAsync();
    }
   
    private async Task GetAlldocsAsync()
    {
        var result = await DocManagementService.GetPaginatedDocsAsync(currentPage, pageSize);
        Docs = result.Item1;    //list of students in current page
        totalItems = result.Item2;    //total students in database
        FilterDocs(); // <--- Call it here

    }

    // For Edit button
    async Task EditDoc(int id)
    {
            await DocModalRef.LoadDoc(id); // Load user data into modal
            DocModalRef.Show();
        // Show modal
    }
    //for Add button
    void AddDoc()
    {
        DocModalRef.ResetDialog(); // Clears previous values
        DocModalRef.Show(); // Just open empty modal
    }

    //pagination
    private async Task NextPage()
    {
        if (currentPage < TotalPages)
        {
            currentPage++;
            await GetAlldocsAsync();
        }
    }

    private async Task PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            await GetAlldocsAsync();
        }
    }
   private void GoToPage(int page)
{
    currentPage = page;
}

    //download file
    private async Task DownloadSingleDoc(int docId)
    {
        try
        {
            var data = await DocManagementService.GenerateSingleDocAsync(docId);
            if (data != null && data.Length > 0)
            {
                var fileName = $"Document_{docId}.xlsx";
                var base64 = Convert.ToBase64String(data);
                await JS.InvokeVoidAsync("downloadExcelFile", fileName, base64);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error downloading single document: {ex.Message}");
        }
    }


}




