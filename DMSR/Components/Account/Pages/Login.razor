@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using DMSR.Services
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using DMSR.Data

@using DMSR.Components.Layout
@layout LogInLayout

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject UserActivityLogService UserActivityService
@inject UserManager<ApplicationUser> UserManager


<PageTitle>Log in</PageTitle>

<style>

    .card {
        width: 100%;
        max-width: 400px;
        border-radius: 10px;
        border-color: rgba(16, 172, 132, 1);
    }

    .head {
        color: rgba(16, 172, 132, 1);
    }

    .t1 {
        padding-left: 40px;
    }

    .title {
        padding-left: 70px;
    }

    .t2 {
        padding-left: 55px;
    }

    .btn {
        background-color: rgba(16, 172, 132, 1);
        color: white;
    }

    .checkbox {
        color: rgba(16, 172, 132, 1);
    }

    .form-control {
        border-color: rgba(16, 172, 132, 1);
        color: rgba(16, 172, 132, 1);
        border-radius: 10px; /* Small rounded corners */
    }

    .input-group-text {
        border-color: rgba(16, 172, 132, 1);
        background-color: white;
    }

    .pasword {
        text-decoration: none;
        color: rgba(16, 172, 132, 1);
    }

    .Forgot {
        font-size: 12px;
    }

    .form-control::placeholder {
        color: rgba(16, 172, 132, 1);
    }
</style>

<div class="d-flex justify-content-center align-items-center vh-100 ">
    <div class="card p-4 shadow-sm">
        <h1 class="head t1 fw-bold  ">DMS</h1>
        <section>
            <StatusMessage Message="@errorMessage" />
            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                <DataAnnotationsValidator />
                <h6 class="head title fw-bold mb-3 ">Document Management System</h6>
                <h5 class="head fw-light mb-5 t2">Login your account!</h5>
                <ValidationSummary class="text-danger" role="alert" />
                <div class="form-floating mb-3 ">
                    <div class="input-group">
                        <span class="input-group-text "><i class="bi bi-person-fill text-success"></i></span>
                        <InputText @bind-Value="Input.Email" class="form-control p-3" autocomplete="username" aria-required="true" placeholder="Username" />
                    </div>
                    @*                     <label for="email" class="form-label">Username</label>
 *@                    <ValidationMessage For="() => Input.Email" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <div class="input-group">
                        <span class="input-group-text ">
                            <i class="bi bi-lock-fill text-success"></i>
                        </span>
                        <InputText type="password" @bind-Value="Input.Password" class="form-control p-3" autocomplete="current-password" aria-required="true" placeholder="Password" />
                    </div>
                    @*                     <label for="password" class="form-label">Password</label>
 *@                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                </div>
                <div class="checkbox Forgot mb-3 d-flex justify-content-between ">
                    <label class="form-label">
                        <InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input " />
                        Remember me
                    </label>
                    <p>
                        <a href="Account/ForgotPassword" class="pasword">Recover Password</a>
                    </p>

                </div>
                <div>
                    <button type="submit" class="w-100 btn btn-lg fw-bold " style="    border-radius: 8px;">
                        LOGIN
                    </button>
                </div>
                @*  <div>
                    <p>
                        <a href="Account/ForgotPassword">Recover Password?</a>
                    </p>
                    <p>
                        <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Register as a new user</a>
                    </p>
                    <p>
                        <a href="Account/ResendEmailConfirmation">Resend email confirmation</a>
                    </p>
                </div> *@
            </EditForm>
        </section>
    </div>
</div>

@*   <div class="col-md-6 col-md-offset-2">
        <section>
            <h3>Use another service to log in.</h3>
            <hr />
            <ExternalLoginPicker />
        </section>
    </div> *@

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        // if (result.Succeeded)
        // {
        //     Logger.LogInformation("User logged in.");
        //     RedirectManager.RedirectTo(ReturnUrl);
        // }
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");

            var user = await UserManager.FindByEmailAsync(Input.Email);
            if (user != null)
            {
                await UserActivityService.LogUserActivityAsync(user.UserName, "Login");
            }

            RedirectManager.RedirectTo(ReturnUrl);
        }

        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
